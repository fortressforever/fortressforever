ps.1.1

; Get the 3-vector from the normal map
tex t0

; Perform matrix multiply to get a local normal bump.  Then
; reflect the eye vector through the normal and sample from 
; a cubic environment map.
texm3x3pad t1, t0_bx2
texm3x3pad t2, t0_bx2		
texm3x3vspec t3, t0_bx2

mul r0.rgb, t3, c1					; envmap color * envmaptint
#ifndef _XBOX
+mov_sat r0.a, v0.a					; Put the cheap water blend factor here
#else
+mov r0.a, v0_sat.a
#endif

#ifndef _XBOX
dp3_sat t2, v0_bx2, t0_bx2			; dot eye-vector with per-pixel normal from t0
#else
dp3 t2, v0_bx2, t0_bx2
mov t2, t2_sat
#endif

; run Fresnel approx. on it: R0 + (1-R0) (1-cos(q))^5 in alpha channel
; NOTE: This is not perspective-correct and results in strange artifacts
mul r1.a, 1-t2.a, 1-t2.a			; squared
mul r1.a, r1.a, r1.a				; quartic
#ifndef _XBOX
mul_sat r1.a, r1.a, 1-t2.a			; quintic
#else
mul r1.a, r1.a, 1-t2.a
mov r1.a, r1_sat.a
#endif

; t1.a is now the fresnel factor
#ifndef _XBOX
add_sat r0.a, r1.a, r0.a			; Now we have the final blend factor between cheap water + refraction
#else
; out of instructions, saturate possibly not needed
add r0.a, r1.a, r0.a
#endif

